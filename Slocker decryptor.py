import os
import hashlib
from Crypto.Cipher import AES

def restore_original_filename(encrypted_name, encrypted_ext):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞"""
    original = encrypted_name[:-len(encrypted_ext)]
    parts = original.split('_')
    
    if len(parts) > 1:
        last_part = parts[-1].lower()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º (2-5 —Å–∏–º–≤–æ–ª–æ–≤)
        if 2 <= len(last_part) <= 5 and last_part.isalnum():
            return '_'.join(parts[:-1]) + '.' + last_part
    return original

def main():
    print("[+] –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–µ—à–∏—Ñ—Ä–∞—Ç–æ—Ä SLocker")

    encrypted_dir = input("[?] –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏: ").strip()
    if not os.path.isdir(encrypted_dir):
        print("[-] –û—à–∏–±–∫–∞: –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return

    encrypted_ext = input("[?] –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤–∏—Ä—É—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä '.ÂãøÂç∏ËΩΩËΩØ‰ª∂Ëß£ÂØÜÂä†QQ3135078046bahk10086256' –∏–ª–∏ '_ÂãøÂç∏ËΩΩËΩØ‰ª∂Ëß£ÂØÜÂä†QQ3135078046bahk10086256'): ").strip()
    try:
        xh = int(input("[?] –ö–æ–¥ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏ (—á–∏—Å–ª–æ –æ—Ç –≤–∏—Ä—É—Å–∞): ").strip())
    except ValueError:
        print("[-] –û—à–∏–±–∫–∞: –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ (–æ–¥–∏–Ω —Ä–∞–∑)
    m = xh + 520
    md5_key = hashlib.md5(str(m).encode()).hexdigest()[8:24]
    iv = b"QQqun 571012706 "  # IV –æ–¥–∏–Ω–∞–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤

    decrypted_count = 0
    for root, _, files in os.walk(encrypted_dir):
        for file in files:
            if file.endswith(encrypted_ext):
                input_path = os.path.join(root, file)
                original_name = restore_original_filename(file, encrypted_ext)
                output_path = os.path.join(root, original_name)

                try:
                    # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                    with open(input_path, 'rb') as f:
                        encrypted_data = f.read()

                    # üîë –°–æ–∑–¥–∞–µ–º –ù–û–í–´–ô –æ–±—ä–µ–∫—Ç AES –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
                    cipher = AES.new(md5_key.encode(), AES.MODE_CBC, iv)
                    decrypted_data = cipher.decrypt(encrypted_data)

                    # –£–¥–∞–ª–µ–Ω–∏–µ PKCS7 padding
                    pad_len = decrypted_data[-1]
                    if 0 < pad_len <= AES.block_size:
                        if all(decrypted_data[-i] == pad_len for i in range(1, pad_len + 1)):
                            decrypted_data = decrypted_data[:-pad_len]

                    # –ó–∞–ø–∏—Å—å
                    os.makedirs(os.path.dirname(output_path), exist_ok=True)
                    with open(output_path, 'wb') as f:
                        f.write(decrypted_data)

                    os.remove(input_path)
                    decrypted_count += 1
                    print(f"[‚úì] –£—Å–ø–µ—Ö: {file} ‚Üí {original_name}")

                except Exception as e:
                    print(f"[√ó] –û—à–∏–±–∫–∞ {file}: {str(e)}")
                    if os.path.exists(output_path):
                        os.remove(output_path)

    print(f"[+] –ì–æ—Ç–æ–≤–æ! –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {decrypted_count} —Ñ–∞–π–ª–æ–≤")

if __name__ == "__main__":
    main()